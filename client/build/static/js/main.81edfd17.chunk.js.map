{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","Main","props","state","formulas","leftValue","rightValue","operator","data","this","push","setState","get","then","res","endpoint","process","PORT","socket","socketIOClient","on","event","target","value","console","log","map","f","i","key","emit","m","n","p","className","length","renderFormulas","type","onChange","e","handleLeftChange","handleOperatorChange","handleRightChange","onClick","handleSubmit","Component","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+NAKMA,G,MAAQC,EAAQ,KAwFPC,E,YAtFX,WAAYC,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACTC,SAAS,GACTC,UAAW,EACXC,WAAY,EACZC,SAAU,KANA,E,6EAWFC,GACZC,KAAKN,MAAMC,SAASM,KAAKF,GACzBC,KAAKE,SAAS,CAACP,SAAUK,KAAKN,MAAMC,a,0CAGpB,IAAD,OACfL,EAAMa,IAAI,SAAS,IAAIC,MAAK,SAAAC,GACxB,EAAKH,SAAS,CAACP,SAAUU,EAAIN,KAAKJ,cAEtC,IAAMW,EAAW,qBAAuBC,8CAAYC,MAAQ,KAC5DR,KAAKS,OAASC,IAAeJ,GAC7BN,KAAKS,OAAOE,GAAG,aAAa,SAAAZ,GACxB,EAAKL,MAAMC,SAASM,KAAKF,GACzB,EAAKG,SAAS,CAACP,SAAU,EAAKD,MAAMC,gB,uCAI3BiB,GACbZ,KAAKE,SAAS,CAACN,UAAWgB,EAAMC,OAAOC,U,wCAGzBF,GACdZ,KAAKE,SAAS,CAACL,WAAYe,EAAMC,OAAOC,U,2CAGvBF,GACjBG,QAAQC,IAAIJ,EAAMC,OAAOC,OACzBd,KAAKE,SAAS,CAACJ,SAAUc,EAAMC,OAAOC,U,uCAItC,OAAOd,KAAKN,MAAMC,SAASsB,KAAI,SAACC,EAAEC,GAC9B,OACI,wBAAIC,IAAKD,GAAID,Q,qCAMrBH,QAAQC,IAAIhB,KAAKN,MAAME,WACvBmB,QAAQC,IAAIhB,KAAKN,MAAMG,YACvBkB,QAAQC,IAAIhB,KAAKN,MAAMI,UACvBE,KAAKS,OAAOY,KAAK,YAAY,CACzBC,EAAGtB,KAAKN,MAAME,UACd2B,EAAGvB,KAAKN,MAAMG,WACd2B,EAAGxB,KAAKN,MAAMI,a,+BAIb,IAAD,OACJ,OACI,yBAAK2B,UAAU,mBACX,qDAA2BzB,KAAKN,MAAMC,SAAS+B,QAC/C,wBAAID,UAAU,gBACTzB,KAAK2B,kBAEV,2BAAOF,UAAU,eACb,2BAAOG,KAAK,OAAOd,MAAOd,KAAKN,MAAME,UAC9BiC,SAAU,SAACC,GAAK,EAAKC,iBAAiBD,MAC7C,4BAAQhB,MAAOd,KAAKN,MAAMI,SAClB+B,SAAU,SAACC,GAAD,OAAK,EAAKE,qBAAqBF,KAC7C,4BAAQhB,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,MAEJ,2BAAOc,KAAK,OAAOd,MAAOd,KAAKN,MAAMG,WAC9BgC,SAAU,SAACC,GAAK,EAAKG,kBAAkBH,OAElD,4BAAQL,UAAU,cAAcS,QAAS,kBAAI,EAAKC,iBAAlD,e,GAjFGC,a,eCSJC,MAVf,WACI,OACI,yBAAKZ,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOa,OAAO,EAAMC,KAAK,IAAIC,UAAWhD,OCGpCiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,iB","file":"static/js/main.81edfd17.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport socketIOClient from \"socket.io-client\";\nimport './Main.css';\n\n\nconst axios = require('axios');\nclass Main extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            formulas:[],\n            leftValue: 0,\n            rightValue: 0,\n            operator: '+'\n        }\n\n    }\n\n    setFormularData(data){\n        this.state.formulas.push(data);\n        this.setState({formulas: this.state.formulas});\n    }\n\n    componentDidMount(){\n        axios.get('/index',{}).then(res=>{\n            this.setState({formulas: res.data.formulas});\n        });\n        const endpoint = \"http://localhost:\" + (process.env.PORT || 5000);\n        this.socket = socketIOClient(endpoint);\n        this.socket.on(\"calculate\", data => {\n            this.state.formulas.push(data);\n            this.setState({formulas: this.state.formulas});\n        });\n    }\n\n    handleLeftChange(event){\n        this.setState({leftValue: event.target.value});\n    }\n\n    handleRightChange(event){\n        this.setState({rightValue: event.target.value});\n    }\n\n    handleOperatorChange(event){\n        console.log(event.target.value);\n        this.setState({operator: event.target.value});\n    }\n\n    renderFormulas(){\n        return this.state.formulas.map((f,i)=>{\n            return (\n                <li key={i}>{f}</li>\n            );\n        })\n    }\n\n    handleSubmit(){\n        console.log(this.state.leftValue);\n        console.log(this.state.rightValue);\n        console.log(this.state.operator);\n        this.socket.emit('calculate',{\n            m: this.state.leftValue,\n            n: this.state.rightValue,\n            p: this.state.operator\n        });\n    }\n\n    render(){\n        return(\n            <div className=\"card card-style\">\n                <div>Tootal formula count {this.state.formulas.length}</div>\n                <ul className=\"formula-list\">\n                    {this.renderFormulas()}\n                </ul>\n                <label className=\"label-style\">\n                    <input type=\"text\" value={this.state.leftValue}\n                           onChange={(e)=>{this.handleLeftChange(e)}} />\n                    <select value={this.state.operator}\n                            onChange={(e)=>this.handleOperatorChange(e)}>\n                        <option value=\"+\">+</option>\n                        <option value=\"-\">-</option>\n                        <option value=\"*\">*</option>\n                        <option value=\"/\">/</option>\n                    </select>\n                    <input type=\"text\" value={this.state.rightValue}\n                           onChange={(e)=>{this.handleRightChange(e)}} />\n                </label>\n                <button className=\"btn-primary\" onClick={()=>this.handleSubmit()}>Submit</button>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main';\nimport {BrowserRouter, Route} from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Route exact={true} path=\"/\" component={Main}></Route>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}